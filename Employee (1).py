import numpy as np
import pickle
import pandas as pd
import streamlit as st
from PIL import Image



st.set_page_config(
    page_title="Employee detection system",
    page_icon='üè¶',
    layout="wide", 
    initial_sidebar_state="expanded",
)
st.subheader('–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—á–µ–≥–æ')

model_selected = st.radio('–ö–∞–∫–æ–π –∞–Ω–∞–ª–∏–∑ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?', ('KNeighborsClassifier', 'LogisticRegression', 'DecisionTreeClassifier',  'RandomForestClassifier', 'AdaBoostClassifier', 'XGBClassifier', 'CatBoostClassifier', 'Default'))


if model_selected == 'KNeighborsClassifier':
    pickle_in = open("employee_KNN.pkl","rb")
    classifier=pickle.load(pickle_in)
elif model_selected in ['LogisticRegression', 'Default']:
    pickle_in = open("employee_LogReg.pkl","rb")
    classifier=pickle.load(pickle_in)
elif model_selected == 'DecisionTreeClassifier':
    pickle_in = open("employee_DecisionTree.pkl","rb")
    classifier=pickle.load(pickle_in)
elif model_selected == 'RandomForestClassifier':
    pickle_in = open("employee_RandomForest.pkl","rb")
elif model_selected == 'AdaBoostClassifier':
    pickle_in = open("employee_AdaBoost.pkl","rb")
elif model_selected == 'XGBClassifier':
    pickle_in = open("employee_xgboos.pkl","rb")
elif model_selected == 'CatBoostClassifier':
    pickle_in = open("employee_catboost.pkl","rb")
    classifier=pickle.load(pickle_in)
    
def predict_note_authentication(JoiningYear, PaymentTier, Age, Gender, EverBenched, ExperienceInCurrentDomain, Bachelors, Masters, PHD, Bangalore, New_Delhi, Pune):
    prediction=classifier.predict([[JoiningYear, PaymentTier, Age, Gender, EverBenched, ExperienceInCurrentDomain, Bachelors, Masters, PHD, Bangalore, New_Delhi, Pune]])
    print(prediction)
    return prediction 



def main():
    st.title("–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—á–µ–≥–æ")
    JoiningYear = st.radio('–í–∞—à –ø–æ–ª?(0 - male, 1 - female)', (0, 1))
    JoiningYear = st.number_input('–í –∫–∞–∫–æ–º –≥–æ–¥—É –Ω–∞—á–∞–ª –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å(–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)?', step=1, value=0)
    PaymentTier = st.number_input('–£—Ä–æ–≤–µ–Ω—å –æ–ø–ª–∞—Ç—ã?(–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã –æ—Ç 1 –¥–æ 3)?', step=1, value=0) 
    Age = st.number_input('–°–∫–æ–ª—å–∫–æ –≤–∞–º –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?(–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)?', step=1, value=0)
    Gender = st.radio('–í–∞—à –ø–æ–ª?(1 - male, 0 - female)', (0, 1))
    EverBenched = st.radio('–∫–æ–≥–¥–∞-–ª–∏–±–æ —Å–∏–¥–µ–ª –Ω–∞ —Å–∫–∞–º–µ–π–∫–µ –∑–∞–ø–∞—Å–Ω—ã—Ö?(0 - –Ω–µ—Ç, 1 - –¥–∞)', (0, 1))    
    ExperienceInCurrentDomain =st.number_input('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏?(–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)?',step=1, value=0)
    Bachelors = st.radio('–ò–º–µ–µ—Ç–µ —Å—Ç–µ–ø–µ–Ω—å –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç–∞?(1 - –¥–∞, 0 - –Ω–µ—Ç)', (0, 1))
    Masters = st.radio('–ò–º–µ–µ—Ç–µ —Å—Ç–µ–ø–µ–Ω—å –º–∞–≥–∏—Å—Ç—Ä–∞?(1 - –¥–∞, 0 - –Ω–µ—Ç)', (0, 1))
    PHD = st.radio('–ò–º–µ–µ—Ç–µ —Å—Ç–µ–ø–µ–Ω—å PHD?(1 - –¥–∞, 0 - –Ω–µ—Ç)', (0, 1))
    Bangalore = st.radio('–í—ã –∏–∑ –≥–æ—Ä–æ–¥–∞ Bangalore?(1 - –¥–∞, 0 - –Ω–µ—Ç)', (0, 1))
    New_Delhi = st.radio('–í—ã –∏–∑ –≥–æ—Ä–æ–¥–∞ New Delhi?(1 - –¥–∞, 0 - –Ω–µ—Ç)', (0, 1))
    Pune = st.radio('–í—ã –∏–∑ –≥–æ—Ä–æ–¥–∞ Pune?(1 - –¥–∞, 0 - –Ω–µ—Ç)', (0, 1))
                     
    result=""
    if st.button("Predict"):
        result=int(predict_note_authentication(JoiningYear, PaymentTier, Age, Gender, EverBenched, ExperienceInCurrentDomain, Bachelors, Masters, PHD, Bangalore, New_Delhi, Pune)) 
     #st.success('The output is {}'.format(result))
    st.success('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏—Å—Ç–µ–º—ã(1 - Will stay, –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏—Å—Ç–µ–º—ã(0 - Will not stay) {}'.format(result))
                     
    
    if st.button("Built by Aziz Rasulov"):
        st.text("–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—á–µ–≥–æ.")
        
              
                  
if __name__=='__main__':
    main()

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    